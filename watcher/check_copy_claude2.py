import sys
import logging
from pathlib import Path
from datetime import datetime
import signal
import os
import threading
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ stdout/stderr –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ Windows
if hasattr(sys.stdout, "reconfigure"):
    sys.stdout.reconfigure(encoding="utf-8")
    sys.stderr.reconfigure(encoding="utf-8")

import shutil
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from winotify import Notification, audio

# –î–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è
import pystray
from PIL import Image, ImageDraw

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤ (—Ä—è–¥–æ–º —Å exe —Ñ–∞–π–ª–æ–º)
if getattr(sys, 'frozen', False):
    # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ exe
    BASE_DIR = Path(sys.executable).parent
else:
    # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ .py —Å–∫—Ä–∏–ø—Ç
    BASE_DIR = Path(__file__).parent

LOG_DIR = BASE_DIR / "logs"
LOG_DIR.mkdir(exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–æ—Ç–∞—Ü–∏–∏ –ª–æ–≥–æ–≤
from logging.handlers import RotatingFileHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
log_handler = RotatingFileHandler(
    LOG_DIR / 'file_watcher.log',
    maxBytes=10*1024*1024,  # 10 MB
    backupCount=5,
    encoding='utf-8'
)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        log_handler,
    ]
)
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —Ä–∞–±–æ—Ç—ã
RUNNING = True
app_icon = None

# –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
DEST_BASE = r"r:\–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\–†–ò–°–ö-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ\3 - –†–ò–°–ö –õ–ò–ö–í–ò–î–ù–û–°–¢–ò\1 - –ë–ê–õ–ê–ù–°"
# –ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ICON_PATH = r"r:\–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\–†–ò–°–ö-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ\3 - –†–ò–°–ö –õ–ò–ö–í–ò–î–ù–û–°–¢–ò\1 - –ë–ê–õ–ê–ù–°\–°–ö–†–ò–ü–¢–´\PyScripts\Get_data_SR\watcher\icon.ico"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
COPY_DELAY = 3.0  # –£–≤–µ–ª–∏—á–µ–Ω–∞ –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
STABILITY_CHECK_INTERVAL = 1.0  # –£–≤–µ–ª–∏—á–µ–Ω –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
MAX_COPY_ATTEMPTS = 5  # –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è

def normalize_filename_for_comparison(filename):
    """
    –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è, –∑–∞–º–µ–Ω—è—è –ø–æ—Ö–æ–∂–∏–µ –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ 
    –∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –µ–¥–∏–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
    """
    # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω: –∫–∏—Ä–∏–ª–ª–∏—Ü–∞ -> –ª–∞—Ç–∏–Ω–∏—Ü–∞
    replacements = {
        '–∞': 'a', '–ê': 'A',
        '–µ': 'e', '–ï': 'E', 
        '–∫': 'k', '–ö': 'K',
        '–º': 'm', '–ú': 'M',
        '–Ω': 'n', '–ù': 'N',
        '–æ': 'o', '–û': 'O',
        '—Ä': 'r', '–†': 'R',
        '—Å': 'c', '–°': 'C',
        '—Ç': 't', '–¢': 'T',
        '—É': 'u', '–£': 'U',
        '—Ö': 'x', '–•': 'X',
        '—ò': 'j',  # –°–µ—Ä–±—Å–∫–∞—è —ò
    }
    
    result = filename.lower()
    for cyr, lat in replacements.items():
        result = result.replace(cyr, lat.lower())
    
    return result

def create_flexible_condition(patterns):
    """
    –°–æ–∑–¥–∞–µ—Ç —É—Å–ª–æ–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ 
    –∫–∏—Ä–∏–ª–ª–∏—Ü—ã/–ª–∞—Ç–∏–Ω–∏—Ü—ã –≤ –∏–º–µ–Ω–∞—Ö —Ñ–∞–π–ª–æ–≤.
    """
    def condition(filename):
        normalized = normalize_filename_for_comparison(filename)
        return any(normalized.startswith(pattern.lower()) for pattern in patterns)
    return condition

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏–π –æ—Ç–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
WATCH_CONFIGS = [
    {
        "watch_dir": r"q:\STAT\new_stat\STA_ARCH\ARX_F01\2025", 
        "conditions": [
            lambda name: normalize_filename_for_comparison(name).startswith("01x") and name.endswith(".xlsx"), 
            lambda name: normalize_filename_for_comparison(name).startswith(("–Ω–æ—Ä–º", "norm"))
        ]
    },
    {
        "watch_dir": r"q:\STAT\new_stat\STA_ARCH\ARX_FC5\2025", 
        "conditions": [
            create_flexible_condition(["c5", "—Å5"])
        ]
    },
    {
        "watch_dir": r"q:\STAT\new_stat\STA_ARCH\ARX_6RX\2025", 
        "conditions": [
            create_flexible_condition(["6rx", "6—Ä—Ö"])
        ]
    },
    {
        "watch_dir": r"q:\STAT\new_stat\STA_ARCH\ARX_6JX\2025",
        "conditions": [
            create_flexible_condition(["6jx", "6—ò—Ö"]),
            lambda name: normalize_filename_for_comparison(name).startswith(("–∞–∫—Ç–∏–≤–∏", "aktivi"))
        ]
    },
    {
        "watch_dir": r"q:\STAT\new_stat\STA_ARCH\ARX_F6KX\2025", 
        "conditions": [
            create_flexible_condition(["6kx", "6–∫—Ö"]),
            lambda name: normalize_filename_for_comparison(name).startswith("sr")
        ]
    },
    {
        "watch_dir": r"q:\STAT\new_stat\STA_ARCH\ARX_F42\2025",
        "conditions": [
            create_flexible_condition(["42x"])
        ]
    }
]
def create_tray_icon():
    """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è."""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∏–∫–æ–Ω–∫—É
        if Path(ICON_PATH).exists():
            image = Image.open(ICON_PATH)
            if image.size != (64, 64):
                image = image.resize((64, 64), Image.Resampling.LANCZOS)
            return image
    except Exception as e:
        logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∫–æ–Ω–∫—É –∏–∑ {ICON_PATH}: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
    image = Image.new('RGB', (64, 64), color='blue')
    draw = ImageDraw.Draw(image)
    # –†–∏—Å—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏–º–≤–æ–ª –ø–∞–ø–∫–∏
    draw.rectangle([10, 20, 54, 50], fill='lightblue', outline='darkblue', width=2)
    draw.rectangle([15, 15, 35, 25], fill='lightblue', outline='darkblue', width=2)
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏–º–≤–æ–ª "–≥–ª–∞–∑–∞" –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    draw.ellipse([20, 30, 30, 40], fill='white', outline='black')
    draw.ellipse([23, 33, 27, 37], fill='black')
    return image

def show_notification(file_name):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Windows –æ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ."""
    try:
        toast = Notification(
            app_id="Stat Watcher", 
            title="üìä –ù–æ–≤—ã–π —Ñ–∞–π–ª STAT", 
            msg=file_name, 
            icon=ICON_PATH
        )
        toast.set_audio(audio.Default, loop=False)
        toast.show()
        time.sleep(0.1)
        logger.info(f"–ü–æ–∫–∞–∑–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞: {file_name}")
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {file_name}: {e}")

def wait_for_file_stability(file_path: Path, max_wait_time=10):
    """
    –û–∂–∏–¥–∞–µ—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å—Å—è —Ä–∞–∑–º–µ—Ä).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—Ç–∞–±–∏–ª–µ–Ω, False –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è.
    """
    start_time = time.time()
    previous_size = None
    network_error_count = 0
    max_network_errors = 3
    
    while time.time() - start_time < max_wait_time:
        try:
            current_size = file_path.stat().st_size
            network_error_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            
            if previous_size is not None and previous_size == current_size:
                logger.debug(f"–§–∞–π–ª {file_path.name} —Å—Ç–∞–±–∏–ª–µ–Ω, —Ä–∞–∑–º–µ—Ä: {current_size}")
                return True
            previous_size = current_size
            time.sleep(STABILITY_CHECK_INTERVAL)
            
        except FileNotFoundError:
            logger.warning(f"–§–∞–π–ª {file_path} –∏—Å—á–µ–∑ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏")
            return False
            
        except OSError as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ (–∫–æ–¥—ã 59, 53, 64, –∏ –¥—Ä.)
            if e.winerror in [53, 59, 64, 67]:  # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏ Windows
                network_error_count += 1
                logger.warning(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ {file_path.name} (–ø–æ–ø—ã—Ç–∫–∞ {network_error_count}/{max_network_errors}): {e}")
                
                if network_error_count >= max_network_errors:
                    logger.error(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –¥–ª—è {file_path.name}")
                    return False
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø—Ä–∏ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–∫–∞—Ö
                time.sleep(min(2 * network_error_count, 5))
                continue
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                return False
                
        except Exception as e:
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
            return False
    
    logger.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ñ–∞–π–ª–∞ {file_path.name}")
    return True

def copy_file_with_retries(src_path: Path, dest_path: Path, max_attempts=MAX_COPY_ATTEMPTS):
    """–ö–æ–ø–∏—Ä—É–µ—Ç —Ñ–∞–π–ª —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –≤ —Å–ª—É—á–∞–µ –Ω–µ—É–¥–∞—á–∏."""
    for attempt in range(1, max_attempts + 1):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            file_exists = False
            for check_attempt in range(3):
                try:
                    file_exists = src_path.exists()
                    break
                except OSError as e:
                    if e.winerror in [53, 59, 64, 67] and check_attempt < 2:
                        logger.debug(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞, –ø–æ–≤—Ç–æ—Ä...")
                        time.sleep(1)
                        continue
                    raise
            
            if not file_exists:
                logger.error(f"–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {src_path}")
                return False
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å retry –ª–æ–≥–∏–∫–æ–π
            read_success = False
            for read_attempt in range(3):
                try:
                    with open(src_path, 'rb') as f:
                        f.read(1)  # –ß–∏—Ç–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∞–π—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
                    read_success = True
                    break
                except OSError as e:
                    if e.winerror in [53, 59, 64, 67] and read_attempt < 2:
                        logger.debug(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ {read_attempt + 1} —Å–µ–∫...")
                        time.sleep(read_attempt + 1)
                        continue
                    raise
            
            if not read_success:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {src_path.name} –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏")
                if attempt < max_attempts:
                    time.sleep(2 * attempt)
                    continue
                return False
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
            shutil.copy2(src_path, dest_path)
            logger.info(f"–§–∞–π–ª {src_path.name} —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {dest_path.parent}")
            return True
            
        except PermissionError as e:
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É {src_path.name}: {e}")
            if attempt < max_attempts:
                time.sleep(1 * attempt)
        except FileNotFoundError as e:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω {src_path.name}: {e}")
            if attempt < max_attempts:
                time.sleep(0.5 * attempt)
        except OSError as e:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            if e.winerror in [53, 59, 64, 67]:
                logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}: –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {src_path.name}: {e}")
                if attempt < max_attempts:
                    time.sleep(3 * attempt)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
            else:
                logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}: –û—à–∏–±–∫–∞ –û–° –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {src_path.name}: {e}")
                if attempt < max_attempts:
                    time.sleep(1 * attempt)
        except Exception as e:
            logger.error(f"–ü–æ–ø—ã—Ç–∫–∞ {attempt}/{max_attempts}: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ {src_path.name}: {e}")
            if attempt < max_attempts:
                time.sleep(1 * attempt)
    
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª {src_path.name} –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    return False

class MultiDirHandler(FileSystemEventHandler):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
    
    def __init__(self, conditions):
        super().__init__()
        self.conditions = conditions
        self.processed_files = set()
        self.pending_files = {}

    def should_process_file(self, file_path: Path):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ñ–∞–π–ª."""
        file_name_lower = file_path.name.lower()
        return any(cond(file_name_lower) for cond in self.conditions)

    def process_file(self, file_path: Path, event_type="unknown"):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å–ª–æ–≤–∏—è –∏ –∫–æ–ø–∏—Ä—É–µ—Ç."""
        file_key = str(file_path)
        
        if file_key in self.processed_files:
            return
            
        if not self.should_process_file(file_path):
            return

        logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {file_path.name} (—Å–æ–±—ã—Ç–∏–µ: {event_type})")
        
        # –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
        time.sleep(COPY_DELAY)
        
        if not wait_for_file_stability(file_path):
            return
            
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        show_notification(file_path.name)
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        today_str = datetime.now().strftime("%d-%m-%Y")
        dest_dir = Path(DEST_BASE) / today_str
        try:
            dest_dir.mkdir(parents=True, exist_ok=True)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é {dest_dir}: {e}")
            return

        # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
        dest_path = dest_dir / file_path.name
        if copy_file_with_retries(file_path, dest_path):
            self.processed_files.add(file_key)
            
            if len(self.processed_files) > 1000:
                self.processed_files.clear()
                logger.info("–û—á–∏—â–µ–Ω —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")

    def on_created(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞."""
        if not event.is_directory:
            self.process_file(Path(event.src_path), "created")

    def on_modified(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞."""
        if not event.is_directory:
            file_path = Path(event.src_path)
            if self.should_process_file(file_path):
                def delayed_process():
                    time.sleep(2)
                    self.process_file(file_path, "modified")
                
                threading.Thread(target=delayed_process, daemon=True).start()

def test_filename_conditions():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É—Å–ª–æ–≤–∏—è –Ω–∞ –ø—Ä–∏–º–µ—Ä–∞—Ö –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤."""
    test_files = [
        "6–ö–•_13082025.xlsx",
        "6–ö–•_–¥–∞–Ω—ñ_13082025.xlsx", 
        "sr_13082025.TXT",
        "6kx_test.xlsx",
        "–°5_13082025.xlsx",
        "c5_test.xlsx",
        "01X_13082025.xlsx",
        "–Ω–æ—Ä–º–∞—Ç–∏–≤—ã_13082025.xlsx",
        "6RX_13082025.xlsx",
        "6—Ä—Ö_test.xlsx",
        "–∞–∫—Ç–∏–≤–∏ –≤–∫–ª –¥–æ —Ñ–∞–π–ª—É_13082025.xlsx",
        "6JX_13082025.xlsx",
        "42x_test.xlsx"
    ]
    
    logger.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ª–æ–≤–∏–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤ ===")
    
    for config in WATCH_CONFIGS:
        watch_dir = config["watch_dir"]
        conditions = config["conditions"]
        logger.info(f"\n–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {watch_dir}")
        
        matching_files = []
        for test_file in test_files:
            if any(cond(test_file.lower()) for cond in conditions):
                matching_files.append(test_file)
        
        if matching_files:
            logger.info(f"  –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ñ–∞–π–ª—ã: {', '.join(matching_files)}")
        else:
            logger.info("  –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    logger.info("=== –ö–æ–Ω–µ—Ü —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===\n")
def validate_paths():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø—É—Ç–µ–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π...")
    
    dest_path = Path(DEST_BASE)
    if not dest_path.exists():
        logger.warning(f"–¶–µ–ª–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {dest_path}")
    
    for i, config in enumerate(WATCH_CONFIGS):
        watch_path = Path(config["watch_dir"])
        if not watch_path.exists():
            logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {watch_path}")
        else:
            logger.info(f"‚úì –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞: {watch_path}")

def monitor_observer_health(observers):
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –∏—Ö –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
    for i, (observer, config) in enumerate(observers):
        try:
            if not observer.is_alive():
                logger.warning(f"–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å {i+1} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞...")
                
                try:
                    observer.stop()
                    observer.join(timeout=5)
                except:
                    pass
                
                path = config["watch_dir"]
                conditions = config["conditions"]
                handler = MultiDirHandler(conditions)
                new_observer = Observer()
                new_observer.schedule(handler, path, recursive=True)
                new_observer.start()
                
                observers[i] = (new_observer, config)
                logger.info(f"–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å {i+1} –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –¥–ª—è: {path}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è {i+1}: {e}")

def daemon_heartbeat():
    """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏."""
    try:
        free_space = shutil.disk_usage(DEST_BASE).free
        if free_space < 1024 * 1024 * 1024:  # –ú–µ–Ω—å—à–µ 1GB
            logger.warning(f"–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ: {free_space / (1024**3):.2f} GB")
        
        logger.debug("–ü—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ")
        return True
    except Exception as e:
        logger.warning(f"–ü—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")
        return False

# –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π
class TrayApp:
    def __init__(self):
        self.observers = []
        self.icon = None
        
    def setup_tray(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∫–æ–Ω–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º —Ç—Ä–µ–µ."""
        image = create_tray_icon()
        
        menu = pystray.Menu(
            pystray.MenuItem("–°—Ç–∞—Ç—É—Å", self.show_status),
            pystray.MenuItem("–û—Ç–∫—Ä—ã—Ç—å –ª–æ–≥–∏", self.open_logs),
            pystray.MenuItem("–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", self.restart_watchers),
            pystray.Menu.SEPARATOR,
            pystray.MenuItem("–í—ã—Ö–æ–¥", self.quit_app)
        )
        
        self.icon = pystray.Icon("FileWatcher", image, "File Watcher - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤", menu)
        
    def show_status(self, icon, item):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã."""
        active_watchers = sum(1 for obs, _ in self.observers if obs.is_alive())
        total_watchers = len(self.observers)
        
        toast = Notification(
            app_id="Stat Watcher",
            title="üìä File Watcher - –°—Ç–∞—Ç—É—Å",
            msg=f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π: {active_watchers}/{total_watchers}",
            icon=ICON_PATH
        )
        toast.show()
        
    def open_logs(self, icon, item):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å –ª–æ–≥–∞–º–∏."""
        try:
            os.startfile(LOG_DIR)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –ª–æ–≥–∞–º–∏: {e}")
            
    def restart_watchers(self, icon, item):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π."""
        logger.info("–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π...")
        monitor_observer_health(self.observers)
        
        toast = Notification(
            app_id="Stat Watcher",
            title="üìä File Watcher",
            msg="–ù–∞–±–ª—é–¥–∞—Ç–µ–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã",
            icon=ICON_PATH
        )
        toast.show()
        
    def quit_app(self, icon, item):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
        global RUNNING
        logger.info("–ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –∏–∑ —Ç—Ä–µ—è...")
        RUNNING = False
        if icon:
            icon.stop()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    global RUNNING, app_icon
    
    logger.info("=== –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ ===")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç—Ä–µ—è
    tray_app = TrayApp()
    tray_app.setup_tray()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—É—Ç–∏
    validate_paths()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π
    observers = []
    
    for config in WATCH_CONFIGS:
        path = config["watch_dir"]
        conditions = config["conditions"]
        
        if not Path(path).exists():
            logger.warning(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {path}")
            continue
            
        handler = MultiDirHandler(conditions)
        observer = Observer()
        observer.schedule(handler, path, recursive=True)
        observer.start()
        observers.append((observer, config))
        logger.info(f"‚úì –ó–∞–ø—É—â–µ–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞: {path}")

    if not observers:
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—è")
        return 1
    else:
        tray_app.observers = observers
        
        logger.info(f"–ü—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–µ. –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π: {len(observers)}")
        logger.info("–ò–∫–æ–Ω–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def background_loop():
            global RUNNING  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            heartbeat_counter = 0
            HEARTBEAT_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç
            HEALTH_CHECK_INTERVAL = 60  # 1 –º–∏–Ω—É—Ç–∞
            
            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–ª—É–∂–±—ã
            try:
                while RUNNING:
                    time.sleep(1)
                    heartbeat_counter += 1
                    
                    if heartbeat_counter % HEALTH_CHECK_INTERVAL == 0:
                        monitor_observer_health(observers)
                    
                    if heartbeat_counter % HEARTBEAT_INTERVAL == 0:
                        daemon_heartbeat()
                        heartbeat_counter = 0
            
            except KeyboardInterrupt:
                logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª KeyboardInterrupt")
            finally:
                RUNNING = False
                logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π...")
                for observer, config in observers:
                    try:
                        observer.stop()
                        observer.join(timeout=10)
                        logger.debug(f"–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {config['watch_dir']}")
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {e}")
            
            logger.info("–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
        bg_thread = threading.Thread(target=background_loop, daemon=True)
        bg_thread.start()
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
            toast = Notification(
                app_id="Stat Watcher",
                title="üìä File Watcher",
                msg="–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—É—â–µ–Ω",
                icon=ICON_PATH
            )
            toast.show()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π –≤—ã–∑–æ–≤)
            if tray_app.icon:
                tray_app.icon.run()
            
        except KeyboardInterrupt:
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª KeyboardInterrupt")
        finally:
            RUNNING = False
            logger.info("–§–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")

if __name__ == "__main__":
    main()