import os
import shutil
import sys
import time
from datetime import datetime
from pathlib import Path
from collections import defaultdict
from threading import Thread, Event
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from winotify import Notification, audio

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
WATCH_DIR = r"r:\–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\–†–ò–°–ö-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ\3 - –†–ò–°–ö –õ–ò–ö–í–ò–î–ù–û–°–¢–ò\1 - –ë–ê–õ–ê–ù–°\test"
DEST_BASE = r"r:\–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\–†–ò–°–ö-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ\3 - –†–ò–°–ö –õ–ò–ö–í–ò–î–ù–û–°–¢–ò\1 - –ë–ê–õ–ê–ù–°\out"
MAX_DEPTH = 5
ICON_PATH = r"r:\–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\–†–ò–°–ö-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ\3 - –†–ò–°–ö –õ–ò–ö–í–ò–î–ù–û–°–¢–ò\1 - –ë–ê–õ–ê–ù–°\–°–ö–†–ò–ü–¢–´\PyScripts\Get_data_SR\watcher\icon.ico"

# === –ë—É—Ñ–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
notification_buffer = set()
stop_event = Event()

def show_notification(file_list):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤"""
    files_text = "\n".join(file_list)
    toast = Notification(
        app_id="Stat Watcher",
        title="üìä –ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã STAT",
        msg=files_text,
        icon=ICON_PATH
    )
    toast.set_audio(audio.Default, loop=False)
    toast.show()
    time.sleep(0.5)

def notification_worker():
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    while not stop_event.is_set():
        if notification_buffer:
            files_to_show = list(notification_buffer)
            notification_buffer.clear()
            show_notification(files_to_show)
        time.sleep(5)

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π ===
class StatFileHandler(FileSystemEventHandler):
    last_processed = defaultdict(float)  # –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π

    def process_file(self, file_path: Path):
        now = time.time()
        if now - self.last_processed[file_path] < 2:
            return
        self.last_processed[file_path] = now

        file_name = file_path.name.lower()
        if (file_name.startswith("01x") and file_name.endswith(".xlsx")) or file_name.startswith("–Ω–æ—Ä–º"):
            # –¥–æ–±–∞–≤–ª—è–µ–º –≤ –±—É—Ñ–µ—Ä –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            notification_buffer.add(file_path.name)

            # –∫–æ–ø–∏—Ä—É–µ–º —Å—Ä–∞–∑—É
            today_str = datetime.now().strftime("%d-%m-%Y")
            dest_dir = Path(DEST_BASE) / today_str
            dest_dir.mkdir(parents=True, exist_ok=True)

            try:
                shutil.copy2(file_path, dest_dir / file_path.name)
                print(f"[INFO] –§–∞–π–ª {file_path.name} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {dest_dir}")
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å {file_path.name}: {e}")

    def on_any_event(self, event):
        if not event.is_directory and event.event_type in ("created", "modified"):
            self.process_file(Path(event.src_path))

# === –ó–∞–ø—É—Å–∫ —Å–ª–µ–∂–µ–Ω–∏—è ===
def start_watching():
    event_handler = StatFileHandler()
    observer = Observer()

    for root, dirs, _ in os.walk(WATCH_DIR):
        depth = Path(root).relative_to(WATCH_DIR).parts
        if len(depth) <= MAX_DEPTH:
            observer.schedule(event_handler, root, recursive=False)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    notif_thread = Thread(target=notification_worker, daemon=True)
    notif_thread.start()

    observer.start()
    print(f"[INFO] –°–ª–µ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∑–∞ {WATCH_DIR} (–≥–ª—É–±–∏–Ω–∞ {MAX_DEPTH})")

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        stop_event.set()
        observer.stop()
    observer.join()

if __name__ == "__main__":
    if getattr(sys, 'frozen', False):
        import ctypes
        ctypes.windll.user32.ShowWindow(ctypes.windll.kernel32.GetConsoleWindow(), 0)
    start_watching()
