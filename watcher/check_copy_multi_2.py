import sys
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ stdout/stderr –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤ Windows
if hasattr(sys.stdout, "reconfigure"):
    sys.stdout.reconfigure(encoding="utf-8")
    sys.stderr.reconfigure(encoding="utf-8")
import shutil
import time
from datetime import datetime
from pathlib import Path
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from winotify import Notification, audio

# –ë–∞–∑–æ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
DEST_BASE = r"r:\–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\–†–ò–°–ö-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ\3 - –†–ò–°–ö –õ–ò–ö–í–ò–î–ù–û–°–¢–ò\1 - –ë–ê–õ–ê–ù–°"
# –ü—É—Ç—å –∫ –∏–∫–æ–Ω–∫–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ICON_PATH = r"r:\–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è\–†–ò–°–ö-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç\–í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ\3 - –†–ò–°–ö –õ–ò–ö–í–ò–î–ù–û–°–¢–ò\1 - –ë–ê–õ–ê–ù–°\–°–ö–†–ò–ü–¢–´\PyScripts\Get_data_SR\watcher\icon.ico"
MAX_DEPTH = 5  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –¥–ª—è –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –∏ —É—Å–ª–æ–≤–∏–π –æ—Ç–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
WATCH_CONFIGS = [
    {
        "watch_dir": r"q:\STAT\new_stat\STA_ARCH\ARX_F01\2025", 
        "conditions": [
            lambda name: name.startswith("01x") and name.endswith(".xlsx"), 
            lambda name: name.startswith("–Ω–æ—Ä–º")
        ]
    },
    {
        "watch_dir": r"q:\STAT\new_stat\STA_ARCH\ARX_FC5\2025", 
        "conditions": [
            lambda name: name.startswith(("c5", "—Å5"))
        ]
    },
    {
        "watch_dir": r"q:\STAT\new_stat\STA_ARCH\ARX_6RX\2025", 
        "conditions": [
            lambda name: name.startswith("6rx")
        ]
    },
    {
        "watch_dir": r"q:\STAT\new_stat\STA_ARCH\ARX_6JX\2025",
        "conditions": [
            lambda name: name.startswith("6jx") or name.startswith("–∞–∫—Ç–∏–≤–∏")
        ]
    },
    {
        "watch_dir": r"q:\STAT\new_stat\STA_ARCH\ARX_F6KX\2025", 
        "conditions": 
        [
            lambda name: name.startswith("6kx") or name.startswith("sr")
        ]
    },
    {
        "watch_dir": r"q:\STAT\new_stat\STA_ARCH\ARX_F42\2025",
        "conditions": [
            lambda name: name.startswith("42x")
        ]
    }
]

def show_notification(file_name):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ Windows –æ –Ω–æ–≤–æ–º —Ñ–∞–π–ª–µ.
    toast = Notification(app_id="Stat Watcher", title="üìä –ù–æ–≤—ã–π —Ñ–∞–π–ª STAT", msg=file_name, icon=ICON_PATH)
    toast.set_audio(audio.Default, loop=False)
    toast.show()
    time.sleep(1)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

class MultiDirHandler(FileSystemEventHandler):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
    def __init__(self, conditions):
        super().__init__()
        self.conditions = conditions  # –°–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π-—É—Å–ª–æ–≤–∏–π –¥–ª—è –æ—Ç–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        self.last_processed = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (file_path -> (size, time))

    def process_file(self, file_path: Path):
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª –ø–æ —É—Å–ª–æ–≤–∏—è–º –∏ –∫–æ–ø–∏—Ä—É–µ—Ç –µ–≥–æ, –µ—Å–ª–∏ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è.
        try:
            file_stat = file_path.stat().st_size  # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        except FileNotFoundError:
            return  # –§–∞–π–ª –º–æ–≥ –±—ã—Ç—å —É–¥–∞–ª—ë–Ω –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏

        now = time.time()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è –Ω–µ–¥–∞–≤–Ω–æ –∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if file_path in self.last_processed:
            last_size, last_time = self.last_processed[file_path]
            if last_size == file_stat and (now - last_time) < 2:
                return

        self.last_processed[file_path] = (file_stat, now)

        file_name = file_path.name.lower()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç –ª–∏ –∏–º—è —Ñ–∞–π–ª–∞ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É —É—Å–ª–æ–≤–∏—é
        if any(cond(file_name) for cond in self.conditions):
            show_notification(file_path.name)
            today_str = datetime.now().strftime("%d-%m-%Y")
            dest_dir = Path(DEST_BASE) / today_str
            dest_dir.mkdir(parents=True, exist_ok=True)

            try:
                shutil.copy2(file_path, dest_dir / file_path.name)
                print(f"[INFO] –§–∞–π–ª {file_path.name} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ {dest_dir}")
            except Exception as e:
                print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å {file_path.name}: {e}")

    def on_created(self, event):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞.
        if not event.is_directory:
            self.process_file(Path(event.src_path))

    def on_modified(self, event):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞.
        if not event.is_directory:
            self.process_file(Path(event.src_path))

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—Å–µ—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    observers = []
    for config in WATCH_CONFIGS:
        path = config["watch_dir"]
        conditions = config["conditions"]
        handler = MultiDirHandler(conditions)
        observer = Observer()
        observer.schedule(handler, path, recursive=True)
        observer.start()
        observers.append(observer)
        print(f"[INFO] –ó–∞–ø—É—â–µ–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ {path}")

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Ctrl+C
        for obs in observers:
            obs.stop()
        for obs in observers:
            obs.join()
